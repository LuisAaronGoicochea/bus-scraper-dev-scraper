{
  "/Users/luisaarongoicocheaalfaro/Documents/Projects/busesforsale/bus_scraper_lambda": {
    "versionSfCore": null,
    "versionFramework": "4.4.16",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>",
      "env": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "service": "school-bus-scraper",
            "provider": {
              "name": "aws",
              "runtime": "python3.9",
              "region": "us-east-1",
              "environment": {
                "DB_HOST": "bus-scraper-db.cl6ayu0capj6.us-east-1.rds.amazonaws.com",
                "DB_NAME": "school_bus_scraper",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "S3_BUCKET": "bus-scraper-data",
                "DEBUG": "false",
                "DB_PORT": "3306"
              },
              "stage": "dev",
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ScraperLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/school-bus-scraper-dev-scraper"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "school-bus-scraper",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/school-bus-scraper-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/school-bus-scraper-dev*:*:*"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "school-bus-scraper",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "ScraperLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-c9ec7096-4db4",
                        "S3Key": "serverless/school-bus-scraper/dev/1734031236337-2024-12-12T19:20:36.337Z/school-bus-scraper.zip"
                      },
                      "Handler": "handler.lambda_handler",
                      "Runtime": "python3.9",
                      "FunctionName": "school-bus-scraper-dev-scraper",
                      "MemorySize": 256,
                      "Timeout": 120,
                      "Environment": {
                        "Variables": {
                          "DB_HOST": "bus-scraper-db.cl6ayu0capj6.us-east-1.rds.amazonaws.com",
                          "DB_NAME": "school_bus_scraper",
                          "DB_USER": "admin",
                          "DB_PASSWORD": "<REDACTED>",
                          "S3_BUCKET": "bus-scraper-data",
                          "DEBUG": "false",
                          "DB_PORT": "3306"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ScraperLogGroup"
                    ]
                  },
                  "ScraperLambdaVersionSQvzzf4GwfhFDFyllPwSGSWfn3zZNzORJLCIBeKa4": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ScraperLambdaFunction"
                      },
                      "CodeSha256": "UaaDMw33m4TSAttzEQS+ufCbEvQdAkF+6jwcQsFnXl8="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-school-bus-scraper",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceRunDashscraper": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "run-scraper",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodRunDashscraperPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceRunDashscraper"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "ScraperLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        },
                        "PassthroughBehavior": "NEVER",
                        "RequestTemplates": {
                          "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                          "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                        },
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "SelectionPattern": "",
                            "ResponseParameters": {},
                            "ResponseTemplates": {}
                          },
                          {
                            "StatusCode": "400",
                            "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                            "ResponseParameters": {},
                            "ResponseTemplates": {}
                          },
                          {
                            "StatusCode": "401",
                            "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                            "ResponseParameters": {},
                            "ResponseTemplates": {}
                          },
                          {
                            "StatusCode": "403",
                            "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                            "ResponseParameters": {},
                            "ResponseTemplates": {}
                          },
                          {
                            "StatusCode": "404",
                            "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                            "ResponseParameters": {},
                            "ResponseTemplates": {}
                          },
                          {
                            "StatusCode": "422",
                            "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                            "ResponseParameters": {},
                            "ResponseTemplates": {}
                          },
                          {
                            "StatusCode": "500",
                            "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                            "ResponseParameters": {},
                            "ResponseTemplates": {}
                          },
                          {
                            "StatusCode": "502",
                            "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                            "ResponseParameters": {},
                            "ResponseTemplates": {}
                          },
                          {
                            "StatusCode": "504",
                            "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                            "ResponseParameters": {},
                            "ResponseTemplates": {}
                          }
                        ],
                        "RequestParameters": {
                          "integration.request.header.X-Amz-Invocation-Type": "'Event'"
                        }
                      },
                      "MethodResponses": [
                        {
                          "ResponseParameters": {},
                          "ResponseModels": {},
                          "StatusCode": "200"
                        },
                        {
                          "ResponseParameters": {},
                          "ResponseModels": {},
                          "StatusCode": "400"
                        },
                        {
                          "ResponseParameters": {},
                          "ResponseModels": {},
                          "StatusCode": "401"
                        },
                        {
                          "ResponseParameters": {},
                          "ResponseModels": {},
                          "StatusCode": "403"
                        },
                        {
                          "ResponseParameters": {},
                          "ResponseModels": {},
                          "StatusCode": "404"
                        },
                        {
                          "ResponseParameters": {},
                          "ResponseModels": {},
                          "StatusCode": "422"
                        },
                        {
                          "ResponseParameters": {},
                          "ResponseModels": {},
                          "StatusCode": "500"
                        },
                        {
                          "ResponseParameters": {},
                          "ResponseModels": {},
                          "StatusCode": "502"
                        },
                        {
                          "ResponseParameters": {},
                          "ResponseModels": {},
                          "StatusCode": "504"
                        }
                      ]
                    },
                    "DependsOn": [
                      "ScraperLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayDeployment1734031195948": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodRunDashscraperPost"
                    ]
                  },
                  "ScraperLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ScraperLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ScraperExecutionRole": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": "ScraperPolicy",
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "s3:PutObject",
                                  "s3:PutObjectAcl",
                                  "s3:GetObject"
                                ],
                                "Resource": [
                                  "arn:aws:s3:::bus-scraper-data/*",
                                  "arn:aws:s3:::bus-scraper-data"
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "rds:Connect",
                                  "rds:DescribeDBInstances"
                                ],
                                "Resource": "*"
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogGroup",
                                  "logs:CreateLogStream",
                                  "logs:PutLogEvents"
                                ],
                                "Resource": "arn:aws:logs:*:*:*"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-us-east-1-c9ec7096-4db4",
                    "Export": {
                      "Name": "sls-school-bus-scraper-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "ScraperLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ScraperLambdaVersionSQvzzf4GwfhFDFyllPwSGSWfn3zZNzORJLCIBeKa4"
                    },
                    "Export": {
                      "Name": "sls-school-bus-scraper-dev-ScraperLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-school-bus-scraper-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "scraper": {
                "handler": "handler.lambda_handler",
                "timeout": 120,
                "memorySize": 256,
                "events": [
                  {
                    "http": {
                      "path": "run-scraper",
                      "method": "post",
                      "async": true,
                      "integration": "AWS",
                      "request": {
                        "passThrough": "NEVER"
                      },
                      "response": {
                        "statusCodes": {
                          "200": {
                            "pattern": ""
                          },
                          "400": {
                            "pattern": "[\\s\\S]*\\[400\\][\\s\\S]*"
                          },
                          "401": {
                            "pattern": "[\\s\\S]*\\[401\\][\\s\\S]*"
                          },
                          "403": {
                            "pattern": "[\\s\\S]*\\[403\\][\\s\\S]*"
                          },
                          "404": {
                            "pattern": "[\\s\\S]*\\[404\\][\\s\\S]*"
                          },
                          "422": {
                            "pattern": "[\\s\\S]*\\[422\\][\\s\\S]*"
                          },
                          "500": {
                            "pattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*"
                          },
                          "502": {
                            "pattern": "[\\s\\S]*\\[502\\][\\s\\S]*"
                          },
                          "504": {
                            "pattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)"
                          }
                        }
                      }
                    }
                  }
                ],
                "name": "school-bus-scraper-dev-scraper",
                "package": {},
                "memory": 256,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "ScraperLambdaVersionSQvzzf4GwfhFDFyllPwSGSWfn3zZNzORJLCIBeKa4"
              }
            },
            "custom": {
              "pythonRequirements": {
                "dockerizePip": false,
                "useStaticCache": false,
                "slim": true,
                "strip": true
              }
            },
            "package": {
              "include": [
                "src/**",
                "handler.py",
                "requirements.txt",
                "package/**",
                "*.py",
                "**/*.py"
              ],
              "exclude": [
                "busesforsale-venv/**",
                "node_modules/**",
                ".venv/**",
                "__pycache__/**",
                ".pytest_cache/**",
                "tests/**",
                ".serverless/**",
                "*.md",
                ".DS_Store"
              ],
              "artifactsS3KeyDirname": "serverless/school-bus-scraper/dev/code-artifacts",
              "deploymentBucket": "serverless-framework-deployments-us-east-1-c9ec7096-4db4",
              "artifact": "/Users/luisaarongoicocheaalfaro/Documents/Projects/busesforsale/bus_scraper_lambda/.serverless/school-bus-scraper.zip",
              "artifactDirectoryName": "serverless/school-bus-scraper/dev/1734031236337-2024-12-12T19:20:36.337Z"
            },
            "plugins": [
              "serverless-dotenv-plugin",
              "serverless-python-requirements"
            ],
            "resources": {
              "Resources": {
                "ScraperExecutionRole": {
                  "Type": "AWS::IAM::Role",
                  "Properties": {
                    "AssumeRolePolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": [
                              "lambda.amazonaws.com"
                            ]
                          },
                          "Action": [
                            "sts:AssumeRole"
                          ]
                        }
                      ]
                    },
                    "Policies": [
                      {
                        "PolicyName": "ScraperPolicy",
                        "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Action": [
                                "s3:PutObject",
                                "s3:PutObjectAcl",
                                "s3:GetObject"
                              ],
                              "Resource": [
                                "arn:aws:s3:::bus-scraper-data/*",
                                "arn:aws:s3:::bus-scraper-data"
                              ]
                            },
                            {
                              "Effect": "Allow",
                              "Action": [
                                "rds:Connect",
                                "rds:DescribeDBInstances"
                              ],
                              "Resource": "*"
                            },
                            {
                              "Effect": "Allow",
                              "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                              ],
                              "Resource": "arn:aws:logs:*:*:*"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              },
              "Outputs": {}
            }
          },
          "configFileDirPath": "/Users/luisaarongoicocheaalfaro/Documents/Projects/busesforsale/bus_scraper_lambda",
          "config": {
            "type": "env"
          },
          "options": {
            "verbose": true
          },
          "stage": "dev",
          "dashboard": null,
          "logger": {
            "namespace": "s:core:resolver:env",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      },
      "sls": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "service": "school-bus-scraper",
            "provider": {
              "name": "aws",
              "runtime": "python3.9",
              "region": "us-east-1",
              "environment": {
                "DB_HOST": "bus-scraper-db.cl6ayu0capj6.us-east-1.rds.amazonaws.com",
                "DB_NAME": "school_bus_scraper",
                "DB_USER": "admin",
                "DB_PASSWORD": "<REDACTED>",
                "S3_BUCKET": "bus-scraper-data",
                "DEBUG": "false",
                "DB_PORT": "3306"
              },
              "stage": "dev",
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ScraperLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/school-bus-scraper-dev-scraper"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "school-bus-scraper",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/school-bus-scraper-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/school-bus-scraper-dev*:*:*"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "school-bus-scraper",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "ScraperLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-c9ec7096-4db4",
                        "S3Key": "serverless/school-bus-scraper/dev/1734031236337-2024-12-12T19:20:36.337Z/school-bus-scraper.zip"
                      },
                      "Handler": "handler.lambda_handler",
                      "Runtime": "python3.9",
                      "FunctionName": "school-bus-scraper-dev-scraper",
                      "MemorySize": 256,
                      "Timeout": 120,
                      "Environment": {
                        "Variables": {
                          "DB_HOST": "bus-scraper-db.cl6ayu0capj6.us-east-1.rds.amazonaws.com",
                          "DB_NAME": "school_bus_scraper",
                          "DB_USER": "admin",
                          "DB_PASSWORD": "<REDACTED>",
                          "S3_BUCKET": "bus-scraper-data",
                          "DEBUG": "false",
                          "DB_PORT": "3306"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ScraperLogGroup"
                    ]
                  },
                  "ScraperLambdaVersionSQvzzf4GwfhFDFyllPwSGSWfn3zZNzORJLCIBeKa4": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ScraperLambdaFunction"
                      },
                      "CodeSha256": "UaaDMw33m4TSAttzEQS+ufCbEvQdAkF+6jwcQsFnXl8="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-school-bus-scraper",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceRunDashscraper": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "run-scraper",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodRunDashscraperPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceRunDashscraper"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "ScraperLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        },
                        "PassthroughBehavior": "NEVER",
                        "RequestTemplates": {
                          "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                          "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                        },
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "SelectionPattern": "",
                            "ResponseParameters": {},
                            "ResponseTemplates": {}
                          },
                          {
                            "StatusCode": "400",
                            "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                            "ResponseParameters": {},
                            "ResponseTemplates": {}
                          },
                          {
                            "StatusCode": "401",
                            "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                            "ResponseParameters": {},
                            "ResponseTemplates": {}
                          },
                          {
                            "StatusCode": "403",
                            "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                            "ResponseParameters": {},
                            "ResponseTemplates": {}
                          },
                          {
                            "StatusCode": "404",
                            "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                            "ResponseParameters": {},
                            "ResponseTemplates": {}
                          },
                          {
                            "StatusCode": "422",
                            "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                            "ResponseParameters": {},
                            "ResponseTemplates": {}
                          },
                          {
                            "StatusCode": "500",
                            "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                            "ResponseParameters": {},
                            "ResponseTemplates": {}
                          },
                          {
                            "StatusCode": "502",
                            "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                            "ResponseParameters": {},
                            "ResponseTemplates": {}
                          },
                          {
                            "StatusCode": "504",
                            "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                            "ResponseParameters": {},
                            "ResponseTemplates": {}
                          }
                        ],
                        "RequestParameters": {
                          "integration.request.header.X-Amz-Invocation-Type": "'Event'"
                        }
                      },
                      "MethodResponses": [
                        {
                          "ResponseParameters": {},
                          "ResponseModels": {},
                          "StatusCode": "200"
                        },
                        {
                          "ResponseParameters": {},
                          "ResponseModels": {},
                          "StatusCode": "400"
                        },
                        {
                          "ResponseParameters": {},
                          "ResponseModels": {},
                          "StatusCode": "401"
                        },
                        {
                          "ResponseParameters": {},
                          "ResponseModels": {},
                          "StatusCode": "403"
                        },
                        {
                          "ResponseParameters": {},
                          "ResponseModels": {},
                          "StatusCode": "404"
                        },
                        {
                          "ResponseParameters": {},
                          "ResponseModels": {},
                          "StatusCode": "422"
                        },
                        {
                          "ResponseParameters": {},
                          "ResponseModels": {},
                          "StatusCode": "500"
                        },
                        {
                          "ResponseParameters": {},
                          "ResponseModels": {},
                          "StatusCode": "502"
                        },
                        {
                          "ResponseParameters": {},
                          "ResponseModels": {},
                          "StatusCode": "504"
                        }
                      ]
                    },
                    "DependsOn": [
                      "ScraperLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayDeployment1734031195948": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodRunDashscraperPost"
                    ]
                  },
                  "ScraperLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ScraperLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ScraperExecutionRole": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": "ScraperPolicy",
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "s3:PutObject",
                                  "s3:PutObjectAcl",
                                  "s3:GetObject"
                                ],
                                "Resource": [
                                  "arn:aws:s3:::bus-scraper-data/*",
                                  "arn:aws:s3:::bus-scraper-data"
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "rds:Connect",
                                  "rds:DescribeDBInstances"
                                ],
                                "Resource": "*"
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogGroup",
                                  "logs:CreateLogStream",
                                  "logs:PutLogEvents"
                                ],
                                "Resource": "arn:aws:logs:*:*:*"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-us-east-1-c9ec7096-4db4",
                    "Export": {
                      "Name": "sls-school-bus-scraper-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "ScraperLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ScraperLambdaVersionSQvzzf4GwfhFDFyllPwSGSWfn3zZNzORJLCIBeKa4"
                    },
                    "Export": {
                      "Name": "sls-school-bus-scraper-dev-ScraperLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-school-bus-scraper-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "scraper": {
                "handler": "handler.lambda_handler",
                "timeout": 120,
                "memorySize": 256,
                "events": [
                  {
                    "http": {
                      "path": "run-scraper",
                      "method": "post",
                      "async": true,
                      "integration": "AWS",
                      "request": {
                        "passThrough": "NEVER"
                      },
                      "response": {
                        "statusCodes": {
                          "200": {
                            "pattern": ""
                          },
                          "400": {
                            "pattern": "[\\s\\S]*\\[400\\][\\s\\S]*"
                          },
                          "401": {
                            "pattern": "[\\s\\S]*\\[401\\][\\s\\S]*"
                          },
                          "403": {
                            "pattern": "[\\s\\S]*\\[403\\][\\s\\S]*"
                          },
                          "404": {
                            "pattern": "[\\s\\S]*\\[404\\][\\s\\S]*"
                          },
                          "422": {
                            "pattern": "[\\s\\S]*\\[422\\][\\s\\S]*"
                          },
                          "500": {
                            "pattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*"
                          },
                          "502": {
                            "pattern": "[\\s\\S]*\\[502\\][\\s\\S]*"
                          },
                          "504": {
                            "pattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)"
                          }
                        }
                      }
                    }
                  }
                ],
                "name": "school-bus-scraper-dev-scraper",
                "package": {},
                "memory": 256,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "ScraperLambdaVersionSQvzzf4GwfhFDFyllPwSGSWfn3zZNzORJLCIBeKa4"
              }
            },
            "custom": {
              "pythonRequirements": {
                "dockerizePip": false,
                "useStaticCache": false,
                "slim": true,
                "strip": true
              }
            },
            "package": {
              "include": [
                "src/**",
                "handler.py",
                "requirements.txt",
                "package/**",
                "*.py",
                "**/*.py"
              ],
              "exclude": [
                "busesforsale-venv/**",
                "node_modules/**",
                ".venv/**",
                "__pycache__/**",
                ".pytest_cache/**",
                "tests/**",
                ".serverless/**",
                "*.md",
                ".DS_Store"
              ],
              "artifactsS3KeyDirname": "serverless/school-bus-scraper/dev/code-artifacts",
              "deploymentBucket": "serverless-framework-deployments-us-east-1-c9ec7096-4db4",
              "artifact": "/Users/luisaarongoicocheaalfaro/Documents/Projects/busesforsale/bus_scraper_lambda/.serverless/school-bus-scraper.zip",
              "artifactDirectoryName": "serverless/school-bus-scraper/dev/1734031236337-2024-12-12T19:20:36.337Z"
            },
            "plugins": [
              "serverless-dotenv-plugin",
              "serverless-python-requirements"
            ],
            "resources": {
              "Resources": {
                "ScraperExecutionRole": {
                  "Type": "AWS::IAM::Role",
                  "Properties": {
                    "AssumeRolePolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": [
                              "lambda.amazonaws.com"
                            ]
                          },
                          "Action": [
                            "sts:AssumeRole"
                          ]
                        }
                      ]
                    },
                    "Policies": [
                      {
                        "PolicyName": "ScraperPolicy",
                        "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Action": [
                                "s3:PutObject",
                                "s3:PutObjectAcl",
                                "s3:GetObject"
                              ],
                              "Resource": [
                                "arn:aws:s3:::bus-scraper-data/*",
                                "arn:aws:s3:::bus-scraper-data"
                              ]
                            },
                            {
                              "Effect": "Allow",
                              "Action": [
                                "rds:Connect",
                                "rds:DescribeDBInstances"
                              ],
                              "Resource": "*"
                            },
                            {
                              "Effect": "Allow",
                              "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                              ],
                              "Resource": "arn:aws:logs:*:*:*"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              },
              "Outputs": {}
            }
          },
          "configFileDirPath": "/Users/luisaarongoicocheaalfaro/Documents/Projects/busesforsale/bus_scraper_lambda",
          "config": {
            "type": "sls"
          },
          "options": {
            "verbose": true
          },
          "stage": "dev",
          "dashboard": null,
          "logger": {
            "namespace": "s:core:resolver:sls",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "/Users/luisaarongoicocheaalfaro/Documents/Projects/busesforsale/bus_scraper_lambda",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "school-bus-scraper",
      "provider": {
        "name": "aws",
        "runtime": "python3.9",
        "region": "us-east-1",
        "environment": {
          "DB_HOST": "bus-scraper-db.cl6ayu0capj6.us-east-1.rds.amazonaws.com",
          "DB_NAME": "school_bus_scraper",
          "DB_USER": "admin",
          "DB_PASSWORD": "<REDACTED>",
          "S3_BUCKET": "bus-scraper-data",
          "DEBUG": "false",
          "DB_PORT": "3306"
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ScraperLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/school-bus-scraper-dev-scraper"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "school-bus-scraper",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/school-bus-scraper-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/school-bus-scraper-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "school-bus-scraper",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "ScraperLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-c9ec7096-4db4",
                  "S3Key": "serverless/school-bus-scraper/dev/1734031236337-2024-12-12T19:20:36.337Z/school-bus-scraper.zip"
                },
                "Handler": "handler.lambda_handler",
                "Runtime": "python3.9",
                "FunctionName": "school-bus-scraper-dev-scraper",
                "MemorySize": 256,
                "Timeout": 120,
                "Environment": {
                  "Variables": {
                    "DB_HOST": "bus-scraper-db.cl6ayu0capj6.us-east-1.rds.amazonaws.com",
                    "DB_NAME": "school_bus_scraper",
                    "DB_USER": "admin",
                    "DB_PASSWORD": "<REDACTED>",
                    "S3_BUCKET": "bus-scraper-data",
                    "DEBUG": "false",
                    "DB_PORT": "3306"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ScraperLogGroup"
              ]
            },
            "ScraperLambdaVersionSQvzzf4GwfhFDFyllPwSGSWfn3zZNzORJLCIBeKa4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ScraperLambdaFunction"
                },
                "CodeSha256": "UaaDMw33m4TSAttzEQS+ufCbEvQdAkF+6jwcQsFnXl8="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-school-bus-scraper",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceRunDashscraper": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "run-scraper",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodRunDashscraperPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceRunDashscraper"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ScraperLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  },
                  "PassthroughBehavior": "NEVER",
                  "RequestTemplates": {
                    "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                    "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                  },
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "SelectionPattern": "",
                      "ResponseParameters": {},
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "400",
                      "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                      "ResponseParameters": {},
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "401",
                      "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                      "ResponseParameters": {},
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "403",
                      "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                      "ResponseParameters": {},
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "404",
                      "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                      "ResponseParameters": {},
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "422",
                      "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                      "ResponseParameters": {},
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "500",
                      "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                      "ResponseParameters": {},
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "502",
                      "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                      "ResponseParameters": {},
                      "ResponseTemplates": {}
                    },
                    {
                      "StatusCode": "504",
                      "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                      "ResponseParameters": {},
                      "ResponseTemplates": {}
                    }
                  ],
                  "RequestParameters": {
                    "integration.request.header.X-Amz-Invocation-Type": "'Event'"
                  }
                },
                "MethodResponses": [
                  {
                    "ResponseParameters": {},
                    "ResponseModels": {},
                    "StatusCode": "200"
                  },
                  {
                    "ResponseParameters": {},
                    "ResponseModels": {},
                    "StatusCode": "400"
                  },
                  {
                    "ResponseParameters": {},
                    "ResponseModels": {},
                    "StatusCode": "401"
                  },
                  {
                    "ResponseParameters": {},
                    "ResponseModels": {},
                    "StatusCode": "403"
                  },
                  {
                    "ResponseParameters": {},
                    "ResponseModels": {},
                    "StatusCode": "404"
                  },
                  {
                    "ResponseParameters": {},
                    "ResponseModels": {},
                    "StatusCode": "422"
                  },
                  {
                    "ResponseParameters": {},
                    "ResponseModels": {},
                    "StatusCode": "500"
                  },
                  {
                    "ResponseParameters": {},
                    "ResponseModels": {},
                    "StatusCode": "502"
                  },
                  {
                    "ResponseParameters": {},
                    "ResponseModels": {},
                    "StatusCode": "504"
                  }
                ]
              },
              "DependsOn": [
                "ScraperLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1734031195948": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodRunDashscraperPost"
              ]
            },
            "ScraperLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ScraperLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ScraperExecutionRole": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": "ScraperPolicy",
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:PutObject",
                            "s3:PutObjectAcl",
                            "s3:GetObject"
                          ],
                          "Resource": [
                            "arn:aws:s3:::bus-scraper-data/*",
                            "arn:aws:s3:::bus-scraper-data"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "rds:Connect",
                            "rds:DescribeDBInstances"
                          ],
                          "Resource": "*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents"
                          ],
                          "Resource": "arn:aws:logs:*:*:*"
                        }
                      ]
                    }
                  }
                ]
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-c9ec7096-4db4",
              "Export": {
                "Name": "sls-school-bus-scraper-dev-ServerlessDeploymentBucketName"
              }
            },
            "ScraperLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ScraperLambdaVersionSQvzzf4GwfhFDFyllPwSGSWfn3zZNzORJLCIBeKa4"
              },
              "Export": {
                "Name": "sls-school-bus-scraper-dev-ScraperLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-school-bus-scraper-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "scraper": {
          "handler": "handler.lambda_handler",
          "timeout": 120,
          "memorySize": 256,
          "events": [
            {
              "http": {
                "path": "run-scraper",
                "method": "post",
                "async": true,
                "integration": "AWS",
                "request": {
                  "passThrough": "NEVER"
                },
                "response": {
                  "statusCodes": {
                    "200": {
                      "pattern": ""
                    },
                    "400": {
                      "pattern": "[\\s\\S]*\\[400\\][\\s\\S]*"
                    },
                    "401": {
                      "pattern": "[\\s\\S]*\\[401\\][\\s\\S]*"
                    },
                    "403": {
                      "pattern": "[\\s\\S]*\\[403\\][\\s\\S]*"
                    },
                    "404": {
                      "pattern": "[\\s\\S]*\\[404\\][\\s\\S]*"
                    },
                    "422": {
                      "pattern": "[\\s\\S]*\\[422\\][\\s\\S]*"
                    },
                    "500": {
                      "pattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*"
                    },
                    "502": {
                      "pattern": "[\\s\\S]*\\[502\\][\\s\\S]*"
                    },
                    "504": {
                      "pattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)"
                    }
                  }
                }
              }
            }
          ],
          "name": "school-bus-scraper-dev-scraper",
          "package": {},
          "memory": 256,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "ScraperLambdaVersionSQvzzf4GwfhFDFyllPwSGSWfn3zZNzORJLCIBeKa4"
        }
      },
      "custom": {
        "pythonRequirements": {
          "dockerizePip": false,
          "useStaticCache": false,
          "slim": true,
          "strip": true
        }
      },
      "package": {
        "include": [
          "src/**",
          "handler.py",
          "requirements.txt",
          "package/**",
          "*.py",
          "**/*.py"
        ],
        "exclude": [
          "busesforsale-venv/**",
          "node_modules/**",
          ".venv/**",
          "__pycache__/**",
          ".pytest_cache/**",
          "tests/**",
          ".serverless/**",
          "*.md",
          ".DS_Store"
        ],
        "artifactsS3KeyDirname": "serverless/school-bus-scraper/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-us-east-1-c9ec7096-4db4",
        "artifact": "/Users/luisaarongoicocheaalfaro/Documents/Projects/busesforsale/bus_scraper_lambda/.serverless/school-bus-scraper.zip",
        "artifactDirectoryName": "serverless/school-bus-scraper/dev/1734031236337-2024-12-12T19:20:36.337Z"
      },
      "plugins": [
        "serverless-dotenv-plugin",
        "serverless-python-requirements"
      ],
      "resources": {
        "Resources": {
          "ScraperExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "ScraperPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:PutObject",
                          "s3:PutObjectAcl",
                          "s3:GetObject"
                        ],
                        "Resource": [
                          "arn:aws:s3:::bus-scraper-data/*",
                          "arn:aws:s3:::bus-scraper-data"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "rds:Connect",
                          "rds:DescribeDBInstances"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": "arn:aws:logs:*:*:*"
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        "Outputs": {}
      }
    },
    "serviceRawFile": "service: school-bus-scraper\n\nprovider:\n  name: aws\n  runtime: python3.9\n  region: us-east-1\n  environment:\n    DB_HOST: ${env:DB_HOST}\n    DB_NAME: ${env:DB_NAME}\n    DB_USER: ${env:DB_USER}\n    DB_PASSWORD: ${env:DB_PASSWORD}\n    S3_BUCKET: ${env:S3_BUCKET}\n    DEBUG: ${env:DEBUG}\n\nfunctions:\n  scraper:\n    handler: handler.lambda_handler\n    timeout: 120\n    memorySize: 256\n    events:\n      - http:\n          path: run-scraper\n          method: post\n          async: true\n\ncustom:\n  pythonRequirements:\n    dockerizePip: false\n    useStaticCache: false\n    slim: true\n    strip: true\n\npackage:\n  include:\n    - src/**\n    - handler.py\n    - requirements.txt\n    - package/**\n    - \"*.py\"\n    - \"**/*.py\"\n  exclude:\n    - busesforsale-venv/**\n    - node_modules/**\n    - .venv/**\n    - __pycache__/**\n    - .pytest_cache/**\n    - tests/**\n    - .serverless/**\n    - \"*.md\"\n    - .DS_Store\n\nplugins:\n  - serverless-dotenv-plugin\n  - serverless-python-requirements\n\nresources:\n  Resources:\n    ScraperExecutionRole:\n      Type: AWS::IAM::Role\n      Properties:\n        AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - lambda.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: ScraperPolicy\n            PolicyDocument:\n              Version: '2012-10-17'\n              Statement:\n                - Effect: Allow\n                  Action:\n                    - s3:PutObject\n                    - s3:PutObjectAcl\n                    - s3:GetObject\n                  Resource:\n                    - \"arn:aws:s3:::bus-scraper-data/*\"\n                    - \"arn:aws:s3:::bus-scraper-data\"\n                - Effect: Allow\n                  Action:\n                    - rds:Connect\n                    - rds:DescribeDBInstances\n                  Resource: \"*\"\n                - Effect: Allow\n                  Action:\n                    - logs:CreateLogGroup\n                    - logs:CreateLogStream\n                    - logs:PutLogEvents\n                  Resource: \"arn:aws:logs:*:*:*\"\n\n",
    "command": [
      "deploy"
    ],
    "options": {
      "verbose": true
    },
    "error": null,
    "params": {},
    "machineId": "cda15c385e985f490acb4af2b720e11f",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "fd2b7b83-264d-4b17-8d2a-853ee24079de",
    "orgName": "busesforsale",
    "userId": "Fl6RMjbjDZ30Ydxf6m",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "busesforsale",
    "subscription": null,
    "userEmail": "luis.aaron18@gmail.com",
    "serviceProviderAwsRegion": "us-east-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "009160074216",
    "projectType": "traditional",
    "versionSf": "4.4.16",
    "serviceProviderAwsCfStackName": "school-bus-scraper-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:us-east-1:009160074216:stack/school-bus-scraper-dev/a2074ff0-b899-11ef-acbe-0ee1a5b1ff57",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:009160074216:stack/school-bus-scraper-dev/a2074ff0-b899-11ef-acbe-0ee1a5b1ff57",
    "serviceProviderAwsCfStackCreated": "2024-12-12T14:59:06.083Z",
    "serviceProviderAwsCfStackUpdated": "2024-12-12T19:21:10.420Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "ScraperLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:009160074216:function:school-bus-scraper-dev-scraper:38",
        "Description": "Current Lambda function version",
        "ExportName": "sls-school-bus-scraper-dev-ScraperLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://1dsgnm0kh8.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-school-bus-scraper-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-c9ec7096-4db4",
        "ExportName": "sls-school-bus-scraper-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}